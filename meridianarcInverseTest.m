tol = 1e-8; % tolerance of latitude calculation [deg]
ellipsoidList = {'WGS84','WGS72','WGS66','WGS60','GRS80','NAD83','GDA94',...
    'AIR30','MdAIR','AusNS','AGD66','AGD84','INTER','IAU65','IAU68','GRS67',...
    'MdGRS','SAD69','CLK80','CLK66','NAD27','KRASO','ATS77','EVRST','BESSL'};

%% TEST 01: Latitude
% Test Inputs
meridianDistance = [0 3.3e6 5e6 6.7e6 1e7];

% Expected Outputs (row = ellipsoid, col = meridianDistance)
lat = [ ...
0 29.818554517 45.135473787 60.412214322 89.982400759; ...
0 29.818562225 45.135485846 60.412231084 89.982427434; ...
0 29.818521408 45.135422685 60.412144347 89.982292103; ...
0 29.818398769 45.135244725 60.411918077 89.981986169; ...
0 29.818554517 45.135473788 60.412214323 89.982400760; ...
0 29.818554517 45.135473788 60.412214323 89.982400760; ...
0 29.818554517 45.135473788 60.412214323 89.982400760; ...
0 29.820608728 45.138735324 60.416820237 89.989917134; ...
0 29.821650760 45.140310125 60.418925095 89.993051016; ...
0 29.818451396 45.135316878 60.412002928 89.982081548; ...
0 29.818451396 45.135316878 60.412002928 89.982081548; ...
0 29.818451396 45.135316878 60.412002928 89.982081548; ...
0 29.818122669 45.134634793 60.410800343 89.979513880; ...
0 29.818451396 45.135316878 60.412002928 89.982081548; ...
0 29.818453036 45.135318944 60.412005040 89.982082959; ...
0 29.818453056 45.135318968 60.412005065 89.982082976; ...
0 29.818451396 45.135316878 60.412002928 89.982081548; ...
0 29.818451396 45.135316878 60.412002928 89.982081548; ...
0 29.820884590 45.138276094 60.414830886 89.983280960; ...
0 29.820172732 45.137429959 60.414060538 89.983097103; ...
0 29.820172732 45.137429959 60.414060538 89.983097103; ...
0 29.818025375 45.134680427 60.411163851 89.980863227; ...
0 29.818563983 45.135488059 60.412233347 89.982428946; ...
0 29.821094007 45.139684140 60.418426648 89.993212351; ...
0 29.821485011 45.140034380 60.418516890 89.992337346];

% Test
nEllipsoids = numel(ellipsoidList);
nTests = length(meridianDistance);
for m = 1:nEllipsoids
    ellipsoidName = ellipsoidList{m};
    [a,b] = refEllip(ellipsoidName);
    for n = 1:nTests
        lat0_bowring = meridianarcInverse(meridianDistance(n),[a b],'Bowring');
        lat0_snyder = meridianarcInverse(meridianDistance(n),[a b],'Snyder');
        lat0_utm = meridianarcInverse(meridianDistance(n),[a b],'UTM');
        lat0_osgb = meridianarcInverse(meridianDistance(n),[a b],'OSGB');

        assert(all(([lat0_bowring, lat0_snyder, lat0_utm, lat0_osgb] ...
            - lat(m,n)) <= tol));
    end
end